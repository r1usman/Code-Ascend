"[\"import sys\\ninput = sys.stdin.readline\\n\\ndef solution(n):\\n\\tcurrent = n - 1\\n\\tr = int(current ** 0.5)\\n\\tif r ** 2 < current:\\n\\t\\tr += 1\\n\\tfirst = r ** 2 - current\\n\\tif first == 0:\\n\\t\\treturn list(range(n))\\n\\treturn list(range(first, n)) + solution(first)\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tresult = solution(n)\\n\\tprint(' '.join(map(str, result[::-1])))\\n\", \"import sys, math\\nINPUT = sys.stdin.readline\\n\\ndef ii():\\n\\treturn int(INPUT())\\n\\ndef iit(strip=False):\\n\\ts = INPUT().strip('[]\\\\n').split(',') if strip else INPUT().split()\\n\\treturn map(int, s)\\n\\ndef iil(strip=False):\\n\\ts = INPUT().strip('[]\\\\n').split(',') if strip else INPUT().split()\\n\\treturn list(map(int, s))\\n\\ndef si():\\n\\treturn INPUT()[:-1]\\n\\ndef rec(n):\\n\\tm = n - 1\\n\\tma = int(math.sqrt(m))\\n\\tif ma ** 2 == m:\\n\\t\\treturn list(reversed(range(n)))\\n\\tmb = ma + 1\\n\\tnn = mb ** 2 - m\\n\\treturn rec(nn) + list(reversed(range(nn, n)))\\n\\ndef solve():\\n\\tn = ii()\\n\\tr = rec(n)\\n\\tprint(' '.join([str(x) for x in r]))\\nCASES = True\\nFROM_FILE = False\\nif FROM_FILE:\\n\\tFILE = open('input.txt', 'r')\\n\\tINPUT = FILE.readline\\nif CASES:\\n\\tt = ii()\\n\\tfor i in range(t):\\n\\t\\tsolve()\\nelse:\\n\\tsolve()\\nif FROM_FILE:\\n\\tFILE.close()\\n\", \"squares = [x ** 2 for x in range(1000)]\\n\\ndef find_border(x):\\n\\tindex = 0\\n\\twhile x > squares[index]:\\n\\t\\tindex += 1\\n\\treturn squares[index]\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tlst = []\\n\\tcurrent = n - 1\\n\\twhile current >= 0:\\n\\t\\tborder = find_border(current)\\n\\t\\tlst.extend(list(range(border - current, current + 1)))\\n\\t\\tcurrent = border - current - 1\\n\\tprint(' '.join(map(str, reversed(lst))))\\n\", \"import bisect\\n\\ndef main():\\n\\tt = int(input())\\n\\tmem = [i ** 2 for i in range(449)]\\n\\twhile t:\\n\\t\\tt -= 1\\n\\t\\tn = int(input())\\n\\t\\toutput = [0] * n\\n\\t\\tmax_el = n - 1\\n\\t\\tcurr_n = n\\n\\t\\twhile max_el > 0:\\n\\t\\t\\tindx = bisect.bisect_left(mem, max_el)\\n\\t\\t\\tif mem[indx] == max_el:\\n\\t\\t\\t\\tput_idx = 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tput_idx = mem[indx] - max_el\\n\\t\\t\\tfor i in range(put_idx, curr_n):\\n\\t\\t\\t\\toutput[i] = curr_n - (i - put_idx + 1)\\n\\t\\t\\tcurr_n = put_idx\\n\\t\\t\\tmax_el = curr_n - 1\\n\\t\\tprint(' '.join(map(str, output)))\\nmain()\\n\", \"import math as m\\n\\ndef div(n):\\n\\tif n == 0 or n == 1:\\n\\t\\treturn [0]\\n\\tif n == 2:\\n\\t\\treturn [1, 0]\\n\\tif n == 5:\\n\\t\\treturn list(range(4, -1, -1))\\n\\tq = m.ceil(m.sqrt(n)) ** 2\\n\\treturn div(q - n + 1) + list(range(n - 1, q - n, -1))\\nc = int(input())\\nwhile c:\\n\\tn = int(input())\\n\\tprint(' '.join((str(i) for i in div(n))))\\n\\tc -= 1\\n\", \"import math\\n\\ndef solve(n):\\n\\tif n == 1:\\n\\t\\treturn [0]\\n\\tif n == 2:\\n\\t\\treturn [1, 0]\\n\\tif n == 3:\\n\\t\\treturn [1, 0, 2]\\n\\tq = int(math.ceil((n - 1) ** 0.5))\\n\\tQ = q * q\\n\\tk = Q - (n - 1)\\n\\tif k > 0:\\n\\t\\treturn solve(k) + [i for i in range(n - 1, k - 1, -1)]\\n\\telse:\\n\\t\\treturn [i for i in range(n - 1, k - 1, -1)]\\n\\ndef main():\\n\\tn = int(input())\\n\\tfor _ in range(n):\\n\\t\\tn = int(input())\\n\\t\\tprint(' '.join([str(x) for x in solve(n)]))\\n\\t\\tpass\\n\\tpass\\nmain()\\n\", \"import math\\n\\ndef solve():\\n\\tn = int(input())\\n\\tls = []\\n\\tcurr = math.ceil(math.sqrt(n - 1)) ** 2 - n + 1\\n\\ti = n - 1\\n\\twhile curr >= 0:\\n\\t\\ttemp = []\\n\\t\\twhile i >= curr:\\n\\t\\t\\ttemp.append(i)\\n\\t\\t\\ti -= 1\\n\\t\\tls = temp + ls\\n\\t\\tif curr >= 1:\\n\\t\\t\\tcurr = math.ceil(math.sqrt(curr - 1)) ** 2 - curr + 1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tprint(' '.join(map(str, ls)))\\nt = int(input())\\nfor _ in range(t):\\n\\tsolve()\\n\", \"from math import ceil, sqrt\\n\\ndef rec(n):\\n\\tsquare = ceil(sqrt(n - 1)) ** 2\\n\\tnum = n - (square - (n - 1))\\n\\ts = ''\\n\\tn -= 1\\n\\tfor i in range(num):\\n\\t\\ts += str(n) + ' '\\n\\t\\tn -= 1\\n\\treturn (s, n + 1)\\niter = int(input())\\nfor z in range(iter):\\n\\tn = int(input())\\n\\tans = ''\\n\\twhile n:\\n\\t\\t(tp, n) = rec(n)\\n\\t\\tans = tp + ans\\n\\tprint(ans)\\n\", \"from math import floor, sqrt\\nt = int(input())\\nsol = []\\n\\ndef solve(n):\\n\\tif n == 0:\\n\\t\\treturn []\\n\\tif n == 1:\\n\\t\\treturn [0]\\n\\tif n == 2:\\n\\t\\treturn [1, 0]\\n\\tn -= 1\\n\\tif floor(sqrt(n)) ** 2 == n:\\n\\t\\tsquare = n\\n\\telse:\\n\\t\\tsquare = (floor(sqrt(n)) + 1) ** 2\\n\\tif square > 2 * n:\\n\\t\\treturn -1\\n\\tif square - n < 0:\\n\\t\\treturn -1\\n\\tsol = []\\n\\tfor i in range(square - n, n + 1):\\n\\t\\tsol.append(square - i)\\n\\trest = solve(square - n)\\n\\tif rest == -1:\\n\\t\\treturn -1\\n\\treturn rest + sol\\n\\treturn\\nfor _ in range(t):\\n\\tsol.append(solve(int(input())))\\nfor s in sol:\\n\\tif s == -1:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(' '.join([str(x) for x in s]))\\n\", \"def find(n, answer):\\n\\ti = 0\\n\\twhile i * i < n:\\n\\t\\ti += 1\\n\\tstart = i * i - n\\n\\tfor x in range(start, n + 1):\\n\\t\\tanswer[x] = i * i - x\\n\\tif start == 0:\\n\\t\\treturn answer\\n\\telse:\\n\\t\\treturn find(start - 1, answer)\\n\\ndef solve():\\n\\tn = int(input())\\n\\tanswer = {}\\n\\tfind(n - 1, answer)\\n\\tprint(' '.join((str(answer[i]) for i in range(n))))\\nT = int(input())\\nfor _ in range(T):\\n\\tsolve()\\n\", \"def sqt(n):\\n\\tind = 0\\n\\twhile ind * ind <= 2 * n - 2:\\n\\t\\tind += 1\\n\\treturn ind - 1\\n\\ndef cf(n):\\n\\tocc = [-1 for i in range(n)]\\n\\tend = n\\n\\tind = sqt(n)\\n\\tink = ind * ind - (n - 1)\\n\\tstore = ink\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tif ink < end:\\n\\t\\t\\tocc[i] = ink\\n\\t\\t\\tink += 1\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\tind -= 1\\n\\t\\t\\tink = ind * ind - i\\n\\t\\t\\tend = store\\n\\t\\t\\tstore = min(ink, store)\\n\\treturn occ\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\ts = ' '.join(map(str, cf(n)))\\n\\tprint(s)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tarray = [0] * n\\n\\tp = n - 1\\n\\twhile p >= 0:\\n\\t\\tm = 0\\n\\t\\twhile m * m < p:\\n\\t\\t\\tm += 1\\n\\t\\td = m * m - p\\n\\t\\tfor idx in range(d, p + 1):\\n\\t\\t\\tarray[idx] = p + d - idx\\n\\t\\tp = d - 1\\n\\tprint(' '.join(map(str, array)))\\n\", \"t = int(input())\\nfor tries in range(t):\\n\\tn = int(input())\\n\\n\\tdef pi(n):\\n\\t\\tif n > 1:\\n\\t\\t\\tif int(n ** 0.5) ** 2 == n:\\n\\t\\t\\t\\treturn '0 ' + ' '.join([str(x) for x in range(n - 1, 0, -1)])\\n\\t\\t\\telif int((n - 1) ** 0.5) ** 2 == n - 1:\\n\\t\\t\\t\\treturn ' '.join([str(x) for x in range(n - 1, -1, -1)])\\n\\t\\t\\telse:\\n\\t\\t\\t\\tsqr = (int(n ** 0.5) + 1) ** 2\\n\\t\\t\\t\\tans = pi(sqr - n + 1) + ' ' + ' '.join([str(x) for x in range(n - 1, sqr - n, -1)])\\n\\t\\t\\t\\treturn ans\\n\\t\\telse:\\n\\t\\t\\treturn '0 '\\n\\tprint(pi(n))\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tr = ''\\n\\tk = math.floor(math.sqrt(2 * (n - 1)))\\n\\twhile k > 1:\\n\\t\\tr1 = ''\\n\\t\\tfor i in range(n - 1, k * k - n, -1):\\n\\t\\t\\tr1 = r1 + str(i) + ' '\\n\\t\\tn = k * k - n + 1\\n\\t\\tr = r1 + r\\n\\t\\tif n < 3:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tk = math.floor(math.sqrt(2 * (n - 1)))\\n\\tif n == 2:\\n\\t\\tr = '1 0 ' + r\\n\\telif n == 1:\\n\\t\\tr = '0 ' + r\\n\\tprint(r)\\n\", \"import math\\n\\ndef nextsqr(x):\\n\\tsqr = math.floor(math.sqrt(x))\\n\\tif sqr * sqr == x:\\n\\t\\treturn x\\n\\treturn (sqr + 1) ** 2\\n\\ndef solve(x):\\n\\tif x < 0:\\n\\t\\treturn []\\n\\tif x == 0:\\n\\t\\treturn [0]\\n\\tif x == 1:\\n\\t\\treturn [1, 0]\\n\\tsq = nextsqr(x)\\n\\tif sq - x > x:\\n\\t\\tprint('??', sq, x)\\n\\t\\treturn None\\n\\ty = sq - x\\n\\tre = solve(y - 1)\\n\\tif re is None:\\n\\t\\treturn None\\n\\tz = [sq - z for z in range(y, x + 1)]\\n\\treturn re + z\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tout = solve(n - 1)\\n\\tif out is None:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(' '.join([str(x) for x in out]))\\n\", \"from math import ceil\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tor_n = n\\n\\tbiggest_square = ceil((n - 1) ** 0.5) ** 2\\n\\tout = []\\n\\tused_min = biggest_square - n + 1\\n\\twhile n >= 0:\\n\\t\\tfor x in range(used_min, biggest_square - used_min + 1):\\n\\t\\t\\tn -= 1\\n\\t\\t\\tout.append(x)\\n\\t\\tif n == 0:\\n\\t\\t\\tbreak\\n\\t\\tbiggest_square = ceil((n - 1) ** 0.5) ** 2\\n\\t\\tused_min = biggest_square - n\\n\\t\\tused_min += 1\\n\\t\\tif biggest_square == 0:\\n\\t\\t\\tbreak\\n\\tif 0 not in out:\\n\\t\\tout.append(0)\\n\\tprint(' '.join((str(x) for x in out[::-1])))\\n\", \"from math import sqrt, ceil, inf\\n\\ndef solve(n):\\n\\tperm = [0] * n\\n\\n\\tdef least_above_sq(q):\\n\\t\\treturn ceil(sqrt(q)) ** 2\\n\\tstar = least_above_sq(len(perm) - 1)\\n\\tused = set()\\n\\tfor k in range(len(perm) - 1, -1, -1):\\n\\t\\tif star - k >= len(perm) or star - k in used:\\n\\t\\t\\tstar = least_above_sq(k)\\n\\t\\tused.add(star - k)\\n\\t\\tperm[k] = star - k\\n\\treturn ' '.join((str(c) for c in perm))\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tprint(solve(n))\\n\", \"t = int(input())\\nsquare_nums = [a * a for a in range(1000)]\\nnoless_squares_nums_dict = {0: 0, 1: 1}\\nidx = 2\\nfor i in range(2, 100000 + 5):\\n\\tif i > square_nums[idx]:\\n\\t\\tidx += 1\\n\\tnoless_squares_nums_dict[i] = square_nums[idx]\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tpermuatation = [-1] * n\\n\\tconcerned_num = n - 1\\n\\twhile True:\\n\\t\\tif concerned_num <= 0:\\n\\t\\t\\tfor i in range(concerned_num + 1):\\n\\t\\t\\t\\tpermuatation[i] = i\\n\\t\\t\\tbreak\\n\\t\\tpair_num = noless_squares_nums_dict[concerned_num] - concerned_num\\n\\t\\tfor i in range(concerned_num - pair_num + 1):\\n\\t\\t\\tpermuatation[pair_num + i] = concerned_num - i\\n\\t\\tconcerned_num = pair_num - 1\\n\\tprint(' '.join([str(i) for i in permuatation]))\\n\", \"t = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tarr = [i for i in range(n)]\\n\\tans = [-1 for i in range(n)]\\n\\tlast_done = n - 1\\n\\twhile last_done > -1:\\n\\t\\tx = int(last_done ** 0.5)\\n\\t\\twhile x * x < last_done:\\n\\t\\t\\tx += 1\\n\\t\\tnum_to_make = x * x\\n\\t\\tstart = x * x - last_done\\n\\t\\tfor i in range(start, last_done + 1):\\n\\t\\t\\tans[i] = last_done\\n\\t\\t\\tlast_done -= 1\\n\\t\\tprint\\n\\tans = list(map(str, ans))\\n\\tprint(' '.join(ans))\\n\", \"import functools\\nxx = int(input())\\n\\n@functools.lru_cache(None)\\ndef cal(n):\\n\\tif n == 1:\\n\\t\\treturn [0]\\n\\tif n == 2:\\n\\t\\treturn [1, 0]\\n\\tif n == 3:\\n\\t\\treturn [1, 0, 2]\\n\\tp = int((n - 1) ** 0.5)\\n\\tif p * p == n - 1:\\n\\t\\treturn list(range(n))[::-1]\\n\\tk = (p + 1) ** 2 - n + 1\\n\\treturn cal(k) + list(range(k, n))[::-1]\\nfor jj in range(xx):\\n\\tn = int(input())\\n\\tt = cal(n)\\n\\tprint(' '.join([str(i) for i in t]))\\n\", \"MemLis = [None] * 100001\\n\\ndef MS(n):\\n\\tif not MemLis[n]:\\n\\t\\tMemLis[n] = MemorySearch(n)\\n\\treturn MemLis[n]\\n\\ndef MemorySearch(n: int):\\n\\tsquare = int(n ** 0.5)\\n\\tif n == square ** 2:\\n\\t\\treturn [0] + list(range(n - 1, 0, -1))\\n\\tif n == square ** 2 + 1:\\n\\t\\treturn list(range(n - 1, -1, -1))\\n\\tkey = (square + 1) ** 2 - n + 1\\n\\treturn MS(key) + list(range(n - 1, key - 1, -1))\\nfor _ in range(int(input())):\\n\\tprint(*MemorySearch(int(input())))\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tl = int(input()) - 1\\n\\tnearest_square = lambda x: int(math.sqrt(x) + 1) ** 2\\n\\tperms = [l]\\n\\twhile math.sqrt(l) != int(math.sqrt(l)):\\n\\t\\tl = nearest_square(l) - l - 1\\n\\t\\tperms.append(l)\\n\\tperms.append(-1)\\n\\tlis = []\\n\\tperms = list(reversed(perms))\\n\\tfor x in range(1, len(perms)):\\n\\t\\tlis = lis + list(reversed(list(range(perms[x - 1] + 1, perms[x] + 1))))\\n\\tprint(' '.join([str(x) for x in lis]))\\n\", \"t = int(input())\\nfor case in range(t):\\n\\tn = int(input())\\n\\tlargest_square = (2 * n) ** 0.5 // 1\\n\\tif (2 * n) ** 0.5 % 1 == 0:\\n\\t\\tlargest_square -= 1\\n\\tmin_val = n\\n\\tcurrent = largest_square ** 2 - (n - 1)\\n\\tstarted = current\\n\\tout = []\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tif current >= min_val:\\n\\t\\t\\tmin_val = started\\n\\t\\t\\twhile current >= started:\\n\\t\\t\\t\\tcurrent -= 2 * largest_square - 1\\n\\t\\t\\t\\tlargest_square -= 1\\n\\t\\t\\tstarted = current\\n\\t\\tout.append(str(int(current)))\\n\\t\\tcurrent += 1\\n\\t\\ti -= 1\\n\\tprint(' '.join(out[::-1]))\\n\", \"from itertools import permutations\\nimport math\\n\\ndef find_good0(n, debug=False):\\n\\tfor p in permutations(range(0, int(n))):\\n\\t\\tif all((math.sqrt(a + i) % 1 == 0 for (a, i) in enumerate(p))):\\n\\t\\t\\tif debug:\\n\\t\\t\\t\\tprint(' '.join(map(str, p)))\\n\\t\\t\\tif debug:\\n\\t\\t\\t\\tprint(' '.join(map(str, [math.sqrt(n + i) for (n, i) in enumerate(p)])))\\n\\t\\t\\treturn p\\n\\treturn -1\\n\\ndef find_good(n):\\n\\toriginal = range(n)\\n\\tnew = [None for _ in original]\\n\\tupper_root = math.floor(math.sqrt(2 * (n - 1)))\\n\\tfor i in range(len(original) - 1, -1, -1):\\n\\t\\tpos = None\\n\\t\\textra = 0\\n\\t\\twhile True:\\n\\t\\t\\troot = upper_root - extra\\n\\t\\t\\tif root < 0:\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\tpos = root ** 2 - original[i]\\n\\t\\t\\tif pos < len(new) and new[pos] == None:\\n\\t\\t\\t\\tnew[pos] = original[i]\\n\\t\\t\\t\\tbreak\\n\\t\\t\\textra += 1\\n\\t\\tupper_root -= extra\\n\\treturn new\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tprint(' '.join(map(str, find_good(n))))\\n\", \"import math\\nq = int(input())\\nfor _ in range(q):\\n\\tn = int(input())\\n\\tl = list(range(0, n))\\n\\ti = n - 1\\n\\twhile i > 0:\\n\\t\\tk = math.ceil(math.sqrt(i)) ** 2 - l[i]\\n\\t\\tif k == 0:\\n\\t\\t\\tl = l[:i + 1][::-1] + l[i + 1:]\\n\\t\\t\\tbreak\\n\\t\\telif k == 1:\\n\\t\\t\\tl = [l[0]] + l[1:i + 1][::-1] + l[i + 1:]\\n\\t\\t\\tbreak\\n\\t\\telif k == 2:\\n\\t\\t\\tl = [1, 0] + l[2:i + 1][::-1] + l[i + 1:]\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tl = l[:k] + l[k:i + 1][::-1] + l[i + 1:]\\n\\t\\t\\ti = k - 1\\n\\t\\t\\tcontinue\\n\\tprint(*l)\\n\", \"import sys\\nn = int(input())\\nans = []\\nfor _ in range(n):\\n\\tn = int(input())\\n\\ta = [0] * n\\n\\tp = n - 1\\n\\twhile p >= 0:\\n\\t\\ti = 0\\n\\t\\twhile i * i < p:\\n\\t\\t\\ti += 1\\n\\t\\tl = i * i - p\\n\\t\\tfor k in range(l, p + 1):\\n\\t\\t\\ta[k] = p + l - k\\n\\t\\tp = l - 1\\n\\tans.append(a)\\nfor i in ans:\\n\\tprint(*i)\\n\", \"import sys\\nnum = int(input())\\nanswer = []\\nfor _ in range(num):\\n\\tnum = int(input())\\n\\ta = [0] * num\\n\\tp = num - 1\\n\\twhile p >= 0:\\n\\t\\ti = 0\\n\\t\\twhile i * i < p:\\n\\t\\t\\ti += 1\\n\\t\\tl = i * i - p\\n\\t\\tfor k in range(l, p + 1):\\n\\t\\t\\ta[k] = p + l - k\\n\\t\\tp = l - 1\\n\\tanswer.append(a)\\nfor i in answer:\\n\\tprint(*i)\\n\", \"I = input\\n(R, G) = (lambda : int(I()), range)\\n\\ndef f(k):\\n\\tif k < 0:\\n\\t\\treturn\\n\\ts = int((2 * k) ** 0.5)\\n\\ts *= s\\n\\tl = s - k\\n\\tf(l - 1)\\n\\twhile l <= k:\\n\\t\\tz[l] = k\\n\\t\\tz[k] = l\\n\\t\\tl += 1\\n\\t\\tk -= 1\\nfor _ in G(R()):\\n\\tn = R()\\n\\tz = [0] * n\\n\\tf(n - 1)\\n\\tprint(*z)\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input()) - 1\\n\\tans = []\\n\\twhile n >= 0:\\n\\t\\tk = int((2 * n) ** (1 / 2)) ** 2\\n\\t\\tans = list(reversed(range(k - n, n + 1))) + ans\\n\\t\\tn = k - n - 1\\n\\tprint(*ans)\\n\", \"t = int(input())\\nfor rep in range(t):\\n\\tn = int(input())\\n\\tif n == 1:\\n\\t\\tprint(0)\\n\\t\\tcontinue\\n\\tsq = 1\\n\\twhile sq ** 2 < n - 1:\\n\\t\\tsq += 1\\n\\tif sq ** 2 - (n - 1) > n - 1:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tans = [-1 for x in range(n)]\\n\\tmn = sq ** 2 - (n - 1)\\n\\tmx = n - 1\\n\\tans[-1] = mn\\n\\tfor x in range(n - 2, -1, -1):\\n\\t\\tif sq ** 2 - x > mx:\\n\\t\\t\\twhile sq ** 2 - x >= mn:\\n\\t\\t\\t\\tsq -= 1\\n\\t\\t\\t\\tif sq < 0:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif sq < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t(mx, mn) = (mn - 1, sq ** 2 - x)\\n\\t\\tans[x] = sq ** 2 - x\\n\\tif -1 in ans:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tprint(' '.join([str(i) for i in ans]))\\n\", \"import math\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\tt = n - 1\\n\\trslt = [0] * n\\n\\tns = math.ceil(math.sqrt(t)) ** 2\\n\\tif n ** 0.5 != ns:\\n\\t\\twhile True:\\n\\t\\t\\tns = math.ceil(math.sqrt(t)) ** 2\\n\\t\\t\\tfor i in range(ns - t, t + 1):\\n\\t\\t\\t\\trslt[i] = ns - i\\n\\t\\t\\tt = ns - t - 1\\n\\t\\t\\tif t < 0:\\n\\t\\t\\t\\tbreak\\n\\t\\tprint(*rslt)\\n\\telse:\\n\\t\\tprint(*[x for x in range(t, -1, -1)])\\n\", \"import math\\n\\ndef calc(x):\\n\\tif x >= 0:\\n\\t\\tres = math.ceil(x ** 0.5) ** 2 - x\\n\\t\\tcalc(res - 1)\\n\\t\\tfor i in range(x, res - 1, -1):\\n\\t\\t\\tprint(i, end=' ')\\nT = int(input())\\nwhile T > 0:\\n\\tn = int(input())\\n\\tif n == 0:\\n\\t\\tprint(0, end='\\\\n')\\n\\t\\tcontinue\\n\\tcalc(n - 1)\\n\\tprint(end='\\\\n')\\n\\tT -= 1\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [0] * n\\n\\tp = n - 1\\n\\twhile p >= 0:\\n\\t\\ti = 0\\n\\t\\twhile i * i < p:\\n\\t\\t\\ti = i + 1\\n\\t\\tx = i * i - p\\n\\t\\tfor k in range(x, p + 1):\\n\\t\\t\\ta[k] = p + x - k\\n\\t\\tp = x - 1\\n\\tprint(*a)\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef find_permutation(arr, n):\\n\\tif arr[n] != math.inf:\\n\\t\\treturn arr[n]\\n\\telse:\\n\\t\\tcheck = math.floor(math.sqrt((n - 1) * 2))\\n\\t\\treturn find_permutation(arr, check ** 2 - (n - 1)) + list(range(n - 1, check ** 2 - (n - 1) - 1, -1))\\ndp = [math.inf for _ in range(10 ** 5 + 1)]\\ndp[0] = []\\ndp[1] = [0]\\ndp[2] = [1, 0]\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tanswer = find_permutation(dp, n)\\n\\tfor num in answer:\\n\\t\\tprint(num, end=' ')\\n\\tprint()\\n\", \"import math\\n\\ndef solve(n):\\n\\tx = math.sqrt(n)\\n\\tif int(x) == x:\\n\\t\\tfor i in range(n, -1, -1):\\n\\t\\t\\tprint(i, end=' ')\\n\\telse:\\n\\t\\ty = math.ceil(x)\\n\\t\\ty = y * y - n\\n\\t\\tsolve(y - 1)\\n\\t\\tfor j in range(n, y - 1, -1):\\n\\t\\t\\tprint(j, end=' ')\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tsolve(n - 1)\\n\\tprint()\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tt = int(input())\\n\\ta = [0] * t\\n\\tcurr = t - 1\\n\\twhile curr >= 0:\\n\\t\\trem = math.ceil(math.sqrt(curr)) ** 2\\n\\t\\tfor x in range(rem - curr, curr + 1):\\n\\t\\t\\ta[x] = rem - x\\n\\t\\tcurr = rem - curr - 1\\n\\tprint(*a)\\n\", \"import math\\nfor i in range(int(input())):\\n\\ta = int(input())\\n\\tindex = a - 1\\n\\tpoint = a - 1\\n\\tli = [0] * a\\n\\twhile index > 0:\\n\\t\\tx = pow(math.ceil(math.sqrt(index)), 2) - index\\n\\t\\tfor i in range(index + 1 - x):\\n\\t\\t\\tli[i + x] = point\\n\\t\\t\\tpoint -= 1\\n\\t\\tindex = x - 1\\n\\tprint(*li)\\n\", \"from math import ceil\\n\\ndef issquare(n):\\n\\treturn int(n ** 0.5) == n ** 0.5\\n\\ndef good(n):\\n\\tif n == 1:\\n\\t\\treturn [0]\\n\\telif n == 2:\\n\\t\\treturn [1, 0]\\n\\tif issquare(n - 1):\\n\\t\\treturn list(range(n - 1, -1, -1))\\n\\tns = ceil(n ** 0.5) ** 2\\n\\tdiff = ns - n + 1\\n\\treturn good(diff) + list(range(n - 1, diff - 1, -1))\\nfor _ in range(int(input())):\\n\\tprint(*good(int(input())), sep=' ')\\n\", \"from array import array\\nimport collections\\nimport sys\\ninput = sys.stdin.readline\\n\\ndef inp():\\n\\treturn int(input())\\n\\ndef inlt():\\n\\treturn list(map(int, input().split()))\\n\\ndef insr():\\n\\ts = input()\\n\\treturn list(s[:len(s) - 1])\\n\\ndef invr():\\n\\treturn map(int, input().split())\\nfor _ in range(inp()):\\n\\tn = inp()\\n\\n\\tdef solve(n: int):\\n\\t\\tsquares = []\\n\\t\\tnum = 0\\n\\t\\twhile num * num <= 2 * (n - 1):\\n\\t\\t\\tsquares.append(num * num)\\n\\t\\t\\tnum += 1\\n\\t\\tans = [0 for _ in range(n)]\\n\\t\\tused = set()\\n\\t\\tfor i in range(n - 1, -1, -1):\\n\\t\\t\\tif not squares:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\twhile squares[-1] - i in used or squares[-1] - i >= n:\\n\\t\\t\\t\\tsquares.pop()\\n\\t\\t\\tv = squares[-1] - i\\n\\t\\t\\tans[i] = v\\n\\t\\t\\tused.add(v)\\n\\t\\treturn ans\\n\\tans = solve(n)\\n\\tprint(*ans)\\n\", \"def solve(n, A):\\n\\tif n < 0:\\n\\t\\treturn\\n\\ta = int((2 * n) ** 0.5)\\n\\ta = a * a\\n\\tb = a - n\\n\\tsolve(b - 1, A)\\n\\twhile b <= n:\\n\\t\\tA[b] = n\\n\\t\\tA[n] = b\\n\\t\\tb += 1\\n\\t\\tn -= 1\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tA = [0] * n\\n\\tsolve(n - 1, A)\\n\\tprint(*A)\\n\", \"from math import sqrt, ceil\\nimport sys\\nsys.setrecursionlimit(10 ** 8)\\n\\ndef function(end):\\n\\tif end < 0:\\n\\t\\treturn []\\n\\tif end == 0:\\n\\t\\treturn [0]\\n\\ttemp = int(ceil(sqrt(end)))\\n\\treturn function(temp * temp - end - 1) + [x for x in range(end, temp * temp - end - 1, -1)]\\nt = int(input())\\nfor _ in range(t):\\n\\tm = int(input())\\n\\tarr = function(m - 1)\\n\\tfor i in arr:\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\n\", \"import math\\n\\ndef solve(r):\\n\\tif r < 0:\\n\\t\\treturn\\n\\ts = int(math.sqrt(2 * r))\\n\\ts *= s\\n\\tl = s - r\\n\\tsolve(l - 1)\\n\\twhile l <= r:\\n\\t\\tans[l] = r\\n\\t\\tans[r] = l\\n\\t\\tl += 1\\n\\t\\tr -= 1\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tans = [0] * n\\n\\tsolve(n - 1)\\n\\tprint(*ans, end=' ')\\n\\tprint()\\n\", \"def f(n):\\n\\tif n == 1:\\n\\t\\tp = []\\n\\t\\tp.append(0)\\n\\t\\treturn p\\n\\tif n == 2:\\n\\t\\tp = []\\n\\t\\tp.append(1)\\n\\t\\tp.append(0)\\n\\t\\treturn p\\n\\tif n == 3:\\n\\t\\tp = []\\n\\t\\tp.append(1)\\n\\t\\tp.append(0)\\n\\t\\tp.append(2)\\n\\t\\treturn p\\n\\tif n == 4:\\n\\t\\tp = []\\n\\t\\tp.append(0)\\n\\t\\tp.append(3)\\n\\t\\tp.append(2)\\n\\t\\tp.append(1)\\n\\t\\treturn p\\n\\tif n == 5:\\n\\t\\tp = []\\n\\t\\tp.append(4)\\n\\t\\tp.append(3)\\n\\t\\tp.append(2)\\n\\t\\tp.append(1)\\n\\t\\tp.append(0)\\n\\t\\treturn p\\n\\tmaxim = n - 1\\n\\tif int(maxim ** 0.5) ** 2 == maxim:\\n\\t\\ty = int(maxim ** 0.5)\\n\\ty = int(maxim ** 0.5 + 1)\\n\\ty *= y\\n\\tmas = []\\n\\tfor i in range(n - 1, y - maxim - 1, -1):\\n\\t\\tmas.append(i)\\n\\tg = []\\n\\tg = f(y - maxim)\\n\\tfor i in range(len(mas)):\\n\\t\\tg.append(mas[i])\\n\\treturn g\\nt = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tprint(*f(n))\\n\", \"cas = int(input())\\nfor j in range(cas):\\n\\tn = int(input())\\n\\ta = [0] * n\\n\\tp = n - 1\\n\\twhile p >= 0:\\n\\t\\ti = 0\\n\\t\\twhile i * i < p:\\n\\t\\t\\ti = i + 1\\n\\t\\tx = i * i - p\\n\\t\\tfor k in range(x, p + 1):\\n\\t\\t\\ta[k] = p + x - k\\n\\t\\tp = x - 1\\n\\tprint(*a)\\n\", \"test_case = int(input())\\nfor ele in range(test_case):\\n\\tn = int(input())\\n\\tp = n - 1\\n\\tans = [0] * n\\n\\twhile p >= 0:\\n\\t\\ti = 0\\n\\t\\twhile i * i < p:\\n\\t\\t\\ti = i + 1\\n\\t\\tperfect_square_wanted = i * i\\n\\t\\tstart = perfect_square_wanted - p\\n\\t\\tfor j in range(start, p + 1):\\n\\t\\t\\tans[j] = perfect_square_wanted - j\\n\\t\\tp = start - 1\\n\\tprint(*ans)\\n\", \"def isqrt(n):\\n\\tx_0 = n >> 1\\n\\tif not x_0:\\n\\t\\treturn n\\n\\tx_1 = x_0 + n // x_0 >> 1\\n\\twhile x_1 < x_0:\\n\\t\\tx_0 = x_1\\n\\t\\tx_1 = x_0 + n // x_0 >> 1\\n\\treturn x_0\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tA = [0] * n\\n\\twhile n > 2:\\n\\t\\tm = isqrt(n - 1)\\n\\t\\tm += m * m != n - 1\\n\\t\\tx = m * m - n\\n\\t\\tA[x + 1:n] = range(n - 1, x, -1)\\n\\t\\tn = x + 1\\n\\tA[:n] = list(range(n))[::-1]\\n\\tprint(*A)\\n\", \"for _ in range(int(input())):\\n\\tn = int(input())\\n\\tm = n - 1\\n\\tp = int(pow(m, 1 / 2))\\n\\tif p * p == m:\\n\\t\\tprint(*list(range(m + 1))[::-1])\\n\\t\\tcontinue\\n\\telif 2 * m + 1 < (p + 1) * (p + 1):\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\tinterval = []\\n\\ti = n - 1\\n\\twhile i > 0:\\n\\t\\tp = int(pow(i, 1 / 2))\\n\\t\\tq = p + 1\\n\\t\\tif p * p == i:\\n\\t\\t\\tinterval.append((i, p * p - i))\\n\\t\\t\\ti = p * p - i\\n\\t\\telif q ** 2 > 2 * i + 1:\\n\\t\\t\\tprint(-1)\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tinterval.append((i, q * q - i))\\n\\t\\t\\ti = q * q - i - 1\\n\\telse:\\n\\t\\tlst = interval[::-1]\\n\\t\\tres = []\\n\\t\\tfor (x, y) in lst:\\n\\t\\t\\tres += list(range(x, y - 1, -1))\\n\\t\\tif 0 not in res:\\n\\t\\t\\tres = [0] + res\\n\\t\\tprint(*res)\\n\", \"import math\\n\\ndef get_max_square(n):\\n\\tif n <= 0:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn math.ceil(math.sqrt(n)) ** 2\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\tmax_square = get_max_square(n - 1)\\n\\tans = []\\n\\tp = 100\\n\\tmaxdex = n - 1\\n\\twhile p > 0:\\n\\t\\tp = max(0, max_square - maxdex)\\n\\t\\tans = [x for x in range(maxdex, p - 1, -1)] + ans\\n\\t\\tmax_square = get_max_square(p - 1)\\n\\t\\tmaxdex = p - 1\\n\\tprint(*ans)\\n\", \"t = int(input())\\n\\ndef find(n, arr):\\n\\tif n == 1:\\n\\t\\tarr[0] = 0\\n\\t\\treturn arr\\n\\tdiff = (n - 1) ** 0.5 - int((n - 1) ** 0.5)\\n\\tif diff == 0.0:\\n\\t\\tk = int(n - 1)\\n\\telse:\\n\\t\\tk = int((n - 1) ** 0.5 + 1) ** 2\\n\\ta = k - (n - 1)\\n\\ti = n - 1\\n\\twhile a < n:\\n\\t\\tarr[i] = a\\n\\t\\ti -= 1\\n\\t\\ta += 1\\n\\tif i == -1:\\n\\t\\treturn arr\\n\\telse:\\n\\t\\tfind(i + 1, arr)\\nfor j in range(t):\\n\\tn = int(input())\\n\\tarr = [0] * n\\n\\tfind(n, arr)\\n\\tprint(*arr)\\n\", \"import math\\nn = int(input(''))\\nfor i in range(n):\\n\\tn2 = int(input(''))\\n\\tlist_nums = list(range(n2))\\n\\tl2 = list('0' * n2)\\n\\tn3 = math.ceil((n2 - 1) ** 0.5) ** 2\\n\\tg = n2 - 1\\n\\tif n2 - 1 == n3:\\n\\t\\tprint(*list_nums[::-1], sep=' ')\\n\\telse:\\n\\t\\tfor i in range(n2 - 1, -1, -1):\\n\\t\\t\\tdiff = n3 - i\\n\\t\\t\\tif diff > g:\\n\\t\\t\\t\\tn3 = math.ceil(i ** 0.5) ** 2\\n\\t\\t\\t\\tdiff = n3 - i\\n\\t\\t\\t\\tg = i\\n\\t\\t\\tl2[i] = diff\\n\\t\\tprint(*l2, sep=' ')\\n\", \"import math\\n\\ndef solve(n, permutation):\\n\\tif n < 0:\\n\\t\\treturn permutation\\n\\tx = math.sqrt(n)\\n\\tif x == int(x):\\n\\t\\tfor i in range(n + 1):\\n\\t\\t\\tpermutation[i] = n - i\\n\\t\\treturn permutation\\n\\telse:\\n\\t\\tx = int(x) + 1\\n\\t\\tx = int(math.pow(x, 2))\\n\\t\\tfor i in range(x - n, n + 1):\\n\\t\\t\\tpermutation[i] = n - (i - (x - n))\\n\\t\\treturn solve(x - n - 1, permutation)\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tn -= 1\\n\\tpermutations = [-1 for i in range(n + 1)]\\n\\ta = solve(n, permutations)\\n\\tprint(*a)\\n\", \"from sys import stdin\\nrd = stdin.readline\\n\\ndef rec(n):\\n\\tif n <= -1:\\n\\t\\treturn\\n\\ts = int((2 * n) ** 0.5) ** 2\\n\\tl = s - n\\n\\trec(l - 1)\\n\\twhile l <= n:\\n\\t\\tans[l] = n\\n\\t\\tans[n] = l\\n\\t\\tl += 1\\n\\t\\tn -= 1\\nfor _ in range(int(rd())):\\n\\tn = int(rd())\\n\\tans = [0] * n\\n\\trec(n - 1)\\n\\tfor i in range(n):\\n\\t\\tprint(ans[i], end=' ')\\n\\tprint()\\n\", \"import math\\ntestCase = int(input())\\n\\ndef sortPerm(arr, x):\\n\\tif x < 0:\\n\\t\\treturn\\n\\tlast = arr[x - 1]\\n\\tfor j in range(x):\\n\\t\\tif math.floor(math.sqrt(last + j)) == math.ceil(math.sqrt(last + j)):\\n\\t\\t\\tz = 0\\n\\t\\t\\tfor k in range(j, x):\\n\\t\\t\\t\\tarr[k] = last - z\\n\\t\\t\\t\\tz += 1\\n\\t\\t\\treturn sortPerm(arr, j)\\nfor i in range(testCase):\\n\\tn = int(input())\\n\\tarr = [x for x in range(n)]\\n\\tcurr = n\\n\\tsortPerm(arr, curr)\\n\\tarr = [str(x) for x in arr]\\n\\tprint(' '.join(arr))\\n\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\nfrom collections import defaultdict\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\tidx = math.ceil((n - 1) ** 0.5)\\n\\ta = [-1] * n\\n\\tmnt = [0] * n\\n\\tcnt = True\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\twhile idx >= 0:\\n\\t\\t\\tp = idx ** 2 - i\\n\\t\\t\\tif p < n:\\n\\t\\t\\t\\tif mnt[p] == 0:\\n\\t\\t\\t\\t\\ta[i] = p\\n\\t\\t\\t\\t\\tmnt[p] = 10 ** 9\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tidx -= 1\\n\\t\\tif a[i] == -1:\\n\\t\\t\\tprint(-1)\\n\\t\\t\\tcnt = False\\n\\t\\t\\tcontinue\\n\\tif cnt == True:\\n\\t\\tprint(*a)\\n\", \"import math\\nfrom collections import *\\n\\ndef solve():\\n\\tn = int(input())\\n\\tans = [0] * n\\n\\ta = []\\n\\tfor i in range(1, n):\\n\\t\\tif i ** 2 >= n - 1:\\n\\t\\t\\ta.append(i ** 2)\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\ta.append(i ** 2)\\n\\tl = {}\\n\\tfor i in range(len(a) - 1, -1, -1):\\n\\t\\td = a[i] - (n - 1)\\n\\t\\tif d not in l:\\n\\t\\t\\tfor i in range(d, n):\\n\\t\\t\\t\\tans[i] = n - 1\\n\\t\\t\\t\\tl[ans[i]] = 1\\n\\t\\t\\t\\tn -= 1\\n\\t\\t\\tn = d\\n\\t\\tif n == 1:\\n\\t\\t\\tbreak\\n\\tprint(*ans)\\nt = int(input())\\nfor _ in range(t):\\n\\tsolve()\\n\", \"def next_square(num):\\n\\tif num == 0:\\n\\t\\treturn 0\\n\\ta = 0\\n\\tb = num\\n\\twhile b - a > 1:\\n\\t\\tg = (a + b) // 2\\n\\t\\tif g ** 2 == num:\\n\\t\\t\\treturn num\\n\\t\\telif g ** 2 > num:\\n\\t\\t\\tb = g\\n\\t\\telse:\\n\\t\\t\\ta = g\\n\\treturn b ** 2\\n\\ndef make(num):\\n\\tif num == 0:\\n\\t\\treturn []\\n\\tk = next_square(num - 1)\\n\\tp = 2 * num - k - 1\\n\\tans = make(num - p) + [i for i in range(num - 1, num - p - 1, -1)]\\n\\treturn ans\\ntestcase = int(input())\\nfor _ in range(testcase):\\n\\tn = int(input())\\n\\tans = make(n)\\n\\tprint(*ans)\\n\", \"import sys\\nimport collections\\nfrom math import ceil, gcd, sqrt, log, floor\\nimport bisect\\nINF = float('inf')\\nmod = 1000000007\\n\\ndef cat(c):\\n\\ti = c\\n\\twhile i * i > c:\\n\\t\\ti -= 1\\n\\treturn i * i\\n\\ndef solve():\\n\\tn = int(input())\\n\\tans = [0] * n\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tfor j in range(i + 1):\\n\\t\\t\\tp = i + j\\n\\t\\t\\tsq = floor(sqrt(p))\\n\\t\\t\\tif sq * sq == p:\\n\\t\\t\\t\\tk1 = j\\n\\t\\t\\t\\tk2 = i\\n\\t\\t\\t\\twhile k1 <= k2:\\n\\t\\t\\t\\t\\tans[k1] = k2\\n\\t\\t\\t\\t\\tans[k2] = k1\\n\\t\\t\\t\\t\\tk1 += 1\\n\\t\\t\\t\\t\\tk2 -= 1\\n\\t\\t\\t\\ti = j - 1\\n\\t\\t\\t\\tbreak\\n\\tprint(*ans)\\nt = int(input())\\nwhile t != 0:\\n\\tsolve()\\n\\tt -= 1\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tarr = []\\n\\tl = 0\\n\\th = n - 1\\n\\tm = math.ceil(math.sqrt(n - 1))\\n\\twhile m >= 0:\\n\\t\\tl = m ** 2 - h\\n\\t\\tfor j in range(l, h + 1):\\n\\t\\t\\tarr.append(j)\\n\\t\\tif l == 0:\\n\\t\\t\\tbreak\\n\\t\\th = l - 1\\n\\t\\tm = math.ceil(math.sqrt(l - 1))\\n\\tarr.reverse()\\n\\tfor i in arr:\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\ttn = int(input())\\n\\tn = tn - 1\\n\\tA = []\\n\\twhile n > 0:\\n\\t\\tk = math.ceil(math.sqrt(n)) ** 2\\n\\t\\tl = k - n\\n\\t\\tA = [n - i for i in range(n - l + 1)] + A\\n\\t\\tn = l - 1\\n\\tif len(A) < tn:\\n\\t\\tA = [0] + A\\n\\tfor i in A:\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\n\", \"t = int(input())\\nwhile t:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tans = [0] * n\\n\\ti = n - 1\\n\\twhile i >= 0:\\n\\t\\tfor j in range(0, i + 1):\\n\\t\\t\\tval = (i + j) ** 0.5\\n\\t\\t\\tif int(val) == val:\\n\\t\\t\\t\\tbreak\\n\\t\\tfor k in range(j, i + 1):\\n\\t\\t\\tans[k] = i + j - k\\n\\t\\ti = j - 1\\n\\tprint(*ans)\\n\", \"import math\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tp = [-1 for i in range(n)]\\n\\twhile n > 0:\\n\\t\\ta = int(math.sqrt(n - 1))\\n\\t\\tif a * a == n - 1:\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tp[i] = n - i - 1\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tq = (a + 1) * (a + 1)\\n\\t\\t\\tfor i in range(q - n + 1, n):\\n\\t\\t\\t\\tp[i] = q - i\\n\\t\\t\\tn = q - n + 1\\n\\tprint(*p)\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tmax_square = math.floor(math.sqrt(2 * n - 1))\\n\\tarr = [a for a in range(n)]\\n\\tj = n - 1\\n\\tsolved = True\\n\\twhile j > 0 and max_square >= 0:\\n\\t\\treq_idx = max_square * max_square - arr[j]\\n\\t\\tif req_idx > n:\\n\\t\\t\\tsolved = False\\n\\t\\t\\tbreak\\n\\t\\telif req_idx < 0 or req_idx > j:\\n\\t\\t\\tmax_square -= 1\\n\\t\\telif req_idx >= 0:\\n\\t\\t\\tdist = (j + 1 - req_idx) // 2\\n\\t\\t\\tfor k in range(dist):\\n\\t\\t\\t\\ttemp = arr[req_idx + k]\\n\\t\\t\\t\\tarr[req_idx + k] = arr[j - k]\\n\\t\\t\\t\\tarr[j - k] = temp\\n\\t\\t\\tmax_square = max_square - 1\\n\\t\\t\\tj = req_idx - 1\\n\\tif solved == False:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tfor num in arr:\\n\\t\\t\\tprint(num, end=' ')\\n\\t\\tprint()\\n\", \"from math import sqrt, floor\\nt = int(input())\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ti = n - 1\\n\\tperm = []\\n\\twhile i >= 0:\\n\\t\\tnearst_square = floor(sqrt(2 * i)) ** 2\\n\\t\\tif 2 * i == nearst_square:\\n\\t\\t\\tperm = [i] + perm\\n\\t\\t\\ti -= 1\\n\\t\\t\\tcontinue\\n\\t\\tdiff = nearst_square - i\\n\\t\\tperm = [x for x in range(i, diff - 1, -1)] + perm\\n\\t\\ti = diff - 1\\n\\tfor el in perm:\\n\\t\\tprint(el, end=' ')\\n\\tprint()\\n\", \"import math\\n\\ndef perfect(n):\\n\\tx = math.floor(math.sqrt(n - 1))\\n\\tl = [0] * n\\n\\ty = x ** 2\\n\\tif y == n - 1:\\n\\t\\tx = x\\n\\telse:\\n\\t\\tx = x + 1\\n\\t\\ty = x ** 2\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\tf = 0\\n\\t\\twhile f == 0:\\n\\t\\t\\tif y - i <= n - 1 and l[y - i] == 0:\\n\\t\\t\\t\\tl[y - i] = i\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ty = (x - 1) ** 2\\n\\t\\t\\t\\tx = x - 1\\n\\treturn l\\nfor i in range(int(input())):\\n\\tn = int(input())\\n\\ta = perfect(n)\\n\\tprint(*a)\\n\", \"try:\\n\\td = {}\\n\\tfor i in range(1000):\\n\\t\\td[i * i] = 1\\n\\tfor _ in range(int(input())):\\n\\t\\tn = int(input())\\n\\t\\tn = n - 1\\n\\t\\tl = [0] * (n + 1)\\n\\t\\twhile n > -1:\\n\\t\\t\\tfor i in d:\\n\\t\\t\\t\\tif n <= i:\\n\\t\\t\\t\\t\\tl[n] = i - n\\n\\t\\t\\t\\t\\tl[i - n] = n\\n\\t\\t\\t\\t\\tn = i - n - 1\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif l[0] == 0:\\n\\t\\t\\tk = 1\\n\\t\\telse:\\n\\t\\t\\tk = 0\\n\\t\\tfor i in range(k, len(l)):\\n\\t\\t\\tif l[i] == 0:\\n\\t\\t\\t\\tl[i] = l[i - 1] - 1\\n\\t\\tfor i in range(len(l)):\\n\\t\\t\\tprint(l[i], end=' ')\\n\\t\\tprint()\\nexcept:\\n\\tpass\\n\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = [0] * n\\n\\tv = int((n - 1) ** 0.5)\\n\\tif v * v == n - 1:\\n\\t\\tp = v\\n\\telse:\\n\\t\\tp = v + 1\\n\\tfor j in range(n - 1, -1, -1):\\n\\t\\tf = 0\\n\\t\\twhile f == 0:\\n\\t\\t\\tif p * p - j <= n - 1 and l[p * p - j] == 0:\\n\\t\\t\\t\\tl[p * p - j] = j\\n\\t\\t\\t\\tf = 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tp -= 1\\n\\tprint(*l)\\n\", \"def perfsqr(a):\\n\\tif int(a ** 0.5) == a ** 0.5:\\n\\t\\treturn True\\n\\telse:\\n\\t\\treturn False\\n\\ndef recur(n, l):\\n\\tif perfsqr(n) == True:\\n\\t\\tfor i in range(n + 1):\\n\\t\\t\\tl.append(i)\\n\\telse:\\n\\t\\tt = int(n ** 0.5) + 1\\n\\t\\tdiff = t ** 2 - n\\n\\t\\tfor i in range(diff, n + 1):\\n\\t\\t\\tl.append(i)\\n\\t\\treturn recur(diff - 1, l)\\n\\treturn l\\nfor _ in range(int(input())):\\n\\tnum = int(input())\\n\\tl = []\\n\\trecur(num - 1, l)\\n\\tfor i in l[::-1]:\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\n\", \"t = int(input())\\nq = [i ** 2 for i in range(318)]\\nfor _ in range(t):\\n\\tn = int(input())\\n\\ta = [0] * n\\n\\tflag = True\\n\\twhile n > 0:\\n\\t\\tqq = -1\\n\\t\\tfor i in range(318):\\n\\t\\t\\tif q[i] >= n - 1 and q[i] - n + 1 <= n - 1:\\n\\t\\t\\t\\tqq = q[i]\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telif q[i] - n + 1 > n - 1:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif not flag:\\n\\t\\t\\tbreak\\n\\t\\tif qq > n - 1:\\n\\t\\t\\tfor i in range(n - 1, qq - n, -1):\\n\\t\\t\\t\\ta[i] = qq - i\\n\\t\\telse:\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\ta[i] = n - 1 - i\\n\\t\\tn = qq - n + 1\\n\\tif not flag:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tprint(*a)\\n\", \"from math import sqrt\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\ta = [*(x for x in range(n))]\\n\\te = n - 1\\n\\tb = []\\n\\twhile e > -1:\\n\\t\\tr = e\\n\\t\\twhile True:\\n\\t\\t\\tif sqrt(r) != round(sqrt(r)):\\n\\t\\t\\t\\tr += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tb.append((r - e, e))\\n\\t\\t\\t\\tbreak\\n\\t\\te = r - e - 1\\n\\tfor i in b:\\n\\t\\tx = i[0]\\n\\t\\ty = i[1]\\n\\t\\twhile x < y:\\n\\t\\t\\ttm = a[x]\\n\\t\\t\\ta[x] = a[y]\\n\\t\\t\\ta[y] = tm\\n\\t\\t\\tx += 1\\n\\t\\t\\ty -= 1\\n\\tprint(*a)\\n\", \"import math\\n\\ndef sq(num):\\n\\tif math.sqrt(num).is_integer():\\n\\t\\treturn int(math.sqrt(num))\\n\\telse:\\n\\t\\tx = int(math.sqrt(num))\\n\\t\\treturn x\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tans = [0] * n\\n\\tlst = list(range(n - 1, -1, -1))\\n\\tnum = 2 * n - 2\\n\\tsqq = sq(num)\\n\\td = dict()\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\ttnum = sqq ** 2 - i\\n\\t\\tif tnum <= n - 1 and d.get(tnum, 'Nan') == 'Nan':\\n\\t\\t\\tans[i] = tnum\\n\\t\\t\\td[tnum] = 1\\n\\t\\telse:\\n\\t\\t\\tf = True\\n\\t\\t\\twhile f:\\n\\t\\t\\t\\tsqq -= 1\\n\\t\\t\\t\\ttnum = sqq ** 2 - i\\n\\t\\t\\t\\tif tnum <= n - 1 and d.get(tnum, 'Nan') == 'Nan':\\n\\t\\t\\t\\t\\td[tnum] = 1\\n\\t\\t\\t\\t\\tf = False\\n\\t\\t\\t\\t\\tans[i] = tnum\\n\\tprint(*ans)\\n\", \"from math import sqrt\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tans = int(sqrt((n - 1) * 2))\\n\\ts = set()\\n\\tl = [0] * n\\n\\tfor i in range(n - 1, -1, -1):\\n\\t\\twhile ans * ans - i > n - 1 or ans * ans - i in s:\\n\\t\\t\\tans -= 1\\n\\t\\tx = ans * ans - i\\n\\t\\ts.add(x)\\n\\t\\tl[i] = x\\n\\tif len(l) == n:\\n\\t\\tprint(*l)\\n\\telse:\\n\\t\\tprint(-1)\\n\", \"T = int(input())\\nfor _ in range(T):\\n\\tn = int(input())\\n\\tl = [i for i in range(n)]\\n\\tsq = [i * i for i in range(n)]\\n\\tj = [-1] * n\\n\\tm = n - 1\\n\\ts = set()\\n\\tpui = 0\\n\\tres = []\\n\\tfor i in sq:\\n\\t\\tif i >= m:\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tpui += 1\\n\\tres = sq[:pui + 2]\\n\\tres = res[::-1]\\n\\tl = l[::-1]\\n\\tq = 0\\n\\tv = n - 1\\n\\ti = 0\\n\\twhile v >= 0:\\n\\t\\tx = res[q] - v\\n\\t\\ta = x\\n\\t\\tif a > n - 1 or j[a] > -1:\\n\\t\\t\\tq += 1\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tj[x] = v\\n\\t\\tv -= 1\\n\\tprint(*j)\\n\", \"import math\\n\\ndef solve(n):\\n\\tif n == 1:\\n\\t\\treturn [0]\\n\\telif n == 2:\\n\\t\\treturn [1, 0]\\n\\tlast = n - 1\\n\\tsqrt = math.sqrt(last)\\n\\tif sqrt == int(sqrt):\\n\\t\\treturn [x for x in range(last, -1, -1)]\\n\\tsqrt = int(sqrt) + 1\\n\\tnearest_psqr = sqrt * sqrt\\n\\tnew_n = nearest_psqr - last\\n\\tres = solve(new_n)\\n\\tres.extend([x for x in range(last, new_n - 1, -1)])\\n\\treturn res\\nt = int(input())\\nwhile t > 0:\\n\\tt -= 1\\n\\tn = int(input())\\n\\tres = solve(n)\\n\\tfor val in res:\\n\\t\\tprint(val, end=' ')\\n\\tprint()\\n\", \"import sys\\nimport math\\nfrom collections import Counter\\n\\ndef gi():\\n\\treturn list(map(int, sys.stdin.readline().strip().split()))\\n\\ndef gs():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef fun(a):\\n\\tans = [-1] * a\\n\\tsq = []\\n\\tc = 0\\n\\twhile c ** 2 <= 2 * a - 2:\\n\\t\\tsq.append(c ** 2)\\n\\t\\tc += 1\\n\\tl = len(sq)\\n\\ti = l - 1\\n\\tj = a - 1\\n\\twhile j >= 0:\\n\\t\\tif ans[j] != -1:\\n\\t\\t\\tj -= 1\\n\\t\\telif sq[i] - j < 0 or sq[i] - j > a - 1:\\n\\t\\t\\ti -= 1\\n\\t\\telif ans[sq[i] - j] != -1:\\n\\t\\t\\ti -= 1\\n\\t\\telse:\\n\\t\\t\\tans[sq[i] - j] = j\\n\\t\\t\\tans[j] = sq[i] - j\\n\\t\\t\\tj -= 1\\n\\treturn ans\\nfor _ in range(int(input())):\\n\\ta = int(input())\\n\\tprint(*fun(a))\\n\", \"testnum = int(input())\\nfor testcount in range(testnum):\\n\\tn = int(input()) - 1\\n\\tl = []\\n\\twhile n >= 0:\\n\\t\\tl.append(n)\\n\\t\\tnn = int(n ** 0.5)\\n\\t\\tif nn ** 2 < n:\\n\\t\\t\\tnn += 1\\n\\t\\tn = nn ** 2 - n - 1\\n\\tprint(*range(l[-1], -1, -1), end='')\\n\\tfor i in range(len(l) - 1, 0, -1):\\n\\t\\tprint('', *range(l[i - 1], l[i], -1), end='')\\n\\tprint()\\n\", \"import math\\n\\ndef n_d(n):\\n\\tw = math.ceil(n ** 0.5) ** 2\\n\\tif n >= w // 2:\\n\\t\\treturn math.ceil(n ** 0.5) ** 2\\n\\telse:\\n\\t\\treturn -1\\nfor _ in range(int(input())):\\n\\tn = int(input()) - 1\\n\\ta = []\\n\\tw0 = 100000000\\n\\twhile n >= 0:\\n\\t\\tw = n_d(n)\\n\\t\\tif w == 1:\\n\\t\\t\\ta.append(0)\\n\\t\\t\\ta.append(1)\\n\\t\\t\\tn -= 2\\n\\t\\telif w == 0:\\n\\t\\t\\ta.append(0)\\n\\t\\t\\tn -= 1\\n\\t\\telse:\\n\\t\\t\\tfor i in range(w - n, n + 1):\\n\\t\\t\\t\\ta.append(i)\\n\\t\\t\\tn = w - n - 1\\n\\tif 0 >= n:\\n\\t\\tfor i in range(len(a)):\\n\\t\\t\\tprint(a[-1 - i], end=' ')\\n\\t\\tprint()\\n\\telse:\\n\\t\\tprint(-1)\\n\", \"c = int(input())\\nfor i in range(c):\\n\\tn = int(input()) - 1\\n\\tarr = [0] * (n + 1)\\n\\tsq = (2 * n) ** (1 / 2) // 1\\n\\tj = n\\n\\twhile j >= 0:\\n\\t\\tif arr[j] == 0:\\n\\t\\t\\tx = int(sq ** 2 - j)\\n\\t\\t\\tif 0 <= x <= n and arr[x] == 0:\\n\\t\\t\\t\\tarr[j] = x\\n\\t\\t\\t\\tarr[x] = j\\n\\t\\t\\telse:\\n\\t\\t\\t\\tsq = sq - 1\\n\\t\\t\\t\\tj = j + 1\\n\\t\\tj = j - 1\\n\\tfor i in arr:\\n\\t\\tprint(i, end=' ')\\n\\tprint()\\n\", \"def solve(n):\\n\\tif n < 2:\\n\\t\\tL.append(n)\\n\\t\\treturn 1\\n\\tfor i in range(n + 1):\\n\\t\\ta = (n + i) ** 0.5\\n\\t\\tif int(a) == a:\\n\\t\\t\\tif solve(i - 1):\\n\\t\\t\\t\\tL.append(n)\\n\\t\\t\\t\\treturn 1\\n\\telse:\\n\\t\\treturn 0\\nfor t in range(int(input())):\\n\\tn = int(input())\\n\\tL = []\\n\\tif solve(n - 1):\\n\\t\\tcur = -1\\n\\t\\tfor i in L:\\n\\t\\t\\tfor j in range(i, cur, -1):\\n\\t\\t\\t\\tprint(j, end=' ')\\n\\t\\t\\tcur = i\\n\\t\\tprint()\\n\\telse:\\n\\t\\tprint(-1)\\n\", \"import math\\n\\ndef swap(permutation: list, index_1, index_2):\\n\\ttemp = permutation[index_1]\\n\\tpermutation[index_1] = permutation[index_2]\\n\\tpermutation[index_2] = temp\\n\\ndef good_checker(perm):\\n\\tfor (i, value) in enumerate(perm):\\n\\t\\tif math.sqrt(i + value) != math.ceil(math.sqrt(i + value)):\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef build(n):\\n\\tif n == 0:\\n\\t\\treturn permutation\\n\\tnext_perfect_square = math.ceil(math.sqrt(n - 1)) ** 2\\n\\tnext_n = next_perfect_square - (n - 1)\\n\\tfor i in range(n - 1, next_n, -1):\\n\\t\\tsolution = next_perfect_square - i\\n\\t\\tpermutation[solution] = i\\n\\t\\tpermutation[i] = solution\\n\\treturn build(next_n)\\ntest_cases = int(input())\\nns = []\\nfor test_case in range(test_cases):\\n\\tns.append(int(input()))\\nfor test_case in range(test_cases):\\n\\tn = ns[test_case]\\n\\tpermutation = [x for x in range(n)]\\n\\tnew_permutation = build(n)\\n\\tif good_checker(new_permutation):\\n\\t\\t[print(x, end=' ') for x in new_permutation]\\n\\telse:\\n\\t\\tprint(-1)\\n\\tprint()\\n\", \"from math import sqrt\\n\\nclass Sol:\\n\\n\\tdef __init__(self):\\n\\t\\tself.d = {}\\n\\n\\tdef ans(self, n):\\n\\t\\tif n in self.d:\\n\\t\\t\\treturn self.d[n]\\n\\t\\telse:\\n\\t\\t\\tx = sqrt(n - 1)\\n\\t\\t\\tif int(x) == x:\\n\\t\\t\\t\\tself.d[n] = list(range(n - 1, -1, -1))\\n\\t\\t\\telse:\\n\\t\\t\\t\\ty = (int(x) + 1) ** 2 - n + 1\\n\\t\\t\\t\\tself.d[n] = self.ans(y) + list(range(n - 1, y - 1, -1))\\n\\t\\t\\treturn self.d[n]\\nsol = Sol()\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tprint(*sol.ans(n))\\n\", \"from bisect import bisect_left as bl\\n\\ndef next_(num):\\n\\treturn sq[bl(sq, num)]\\nsq = []\\ni = 0\\nwhile i * i <= 10 ** 6:\\n\\tsq.append(i * i)\\n\\ti += 1\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tn -= 1\\n\\tans = []\\n\\twhile n >= 0:\\n\\t\\tt = next_(n)\\n\\t\\tdiff = t - n\\n\\t\\tfor i in range(diff, n + 1):\\n\\t\\t\\tans.append(i)\\n\\t\\tn = diff - 1\\n\\tprint(*ans[::-1])\\n\", \"def lb(x):\\n\\tl = -1\\n\\tr = len(sq)\\n\\twhile r - l > 1:\\n\\t\\tm = (l + r) // 2\\n\\t\\tif sq[m] < x:\\n\\t\\t\\tl = m\\n\\t\\telse:\\n\\t\\t\\tr = m\\n\\treturn r\\nout = []\\nsq = []\\ni = 0\\nwhile i ** 2 <= 10 ** 5:\\n\\tsq.append(i ** 2)\\n\\ti += 1\\nsq.append(i ** 2)\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\ta = [0] * n\\n\\tm = n - 1\\n\\twhile m > 0:\\n\\t\\ts = sq[lb(m)]\\n\\t\\ti = s - m\\n\\t\\twhile i < n and a[i] == 0:\\n\\t\\t\\ta[i] = m\\n\\t\\t\\tm -= 1\\n\\t\\t\\ti += 1\\n\\tout.append(a)\\nfor i in out:\\n\\tprint(*i)\\n\", \"import math\\nt = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tlst = [j for j in range(n)]\\n\\ted = n - 1\\n\\twhile ed >= 0:\\n\\t\\ttmp = int(math.ceil(math.sqrt(ed)))\\n\\t\\tst = tmp * tmp - ed\\n\\t\\ti1 = st\\n\\t\\ti2 = ed\\n\\t\\twhile i1 < i2:\\n\\t\\t\\t(lst[i1], lst[i2]) = (lst[i2], lst[i1])\\n\\t\\t\\ti1 += 1\\n\\t\\t\\ti2 += -1\\n\\t\\ted = st - 1\\n\\tfor i in lst:\\n\\t\\tprint(i, end=' ')\\n\\tprint('\\\\n')\\n\", \"from math import sqrt, ceil\\n\\ndef checker(permutation):\\n\\tfor (i, value) in enumerate(permutation):\\n\\t\\tif sqrt(value + i) != ceil(sqrt(i + value)):\\n\\t\\t\\treturn False\\n\\treturn True\\n\\ndef build(num, permutation):\\n\\tif num == 0:\\n\\t\\treturn permutation\\n\\tsquare = ceil(sqrt(num - 1)) ** 2\\n\\tnext_n = square - (num - 1)\\n\\tfor i in range(num - 1, next_n, -1):\\n\\t\\tsolution = square - i\\n\\t\\tpermutation[solution] = i\\n\\t\\tpermutation[i] = solution\\n\\treturn build(next_n, permutation)\\nfor _ in range(int(input())):\\n\\tn = int(input())\\n\\tperm = list(range(n))\\n\\tperm = build(n, perm)\\n\\tif checker(perm):\\n\\t\\tprint(*perm)\\n\\telse:\\n\\t\\tprint(-1)\\n\"]"